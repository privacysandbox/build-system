#!/bin/bash

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Test runner for the build system. This script should preferably be run
# "directly" and not inside docker, permitting the test cases to execute
# both inside and outside a docker container.

set -o pipefail
set -o errexit

trap _cleanup EXIT
function _cleanup() {
  declare -r -i STATUS=$?
  if [[ -d ${TMP_HASHES_DIR1} ]]; then
    rm -rf "${TMP_HASHES_DIR1}" "${TMP_HASHES_DIR2}"
  fi
  if [[ ${STATUS} -ne 0 ]]; then
    printf "Error: run-tests status code: %d\n" "${STATUS}"
    sleep 5s
  fi
  exit ${STATUS}
}

function get_image_list() {
  declare -r _images_dir="$1"
  find "${_images_dir}" -maxdepth 1 -mindepth 1 -type d -printf "%P\n" | sort
}

function usage() {
  declare -r -i exitval=${1-1}
  cat &>/dev/stderr <<USAGE
usage:
  $0 <options>
    --image <name>  Run tests only for specified image
    --fast          Only generate hashes directly rather than also using cbuild
    --verbose       Produce verbose output
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

declare -i FAST=0
declare -i VERBOSE=0
declare IMAGE

while [[ $# -gt 0 ]]; do
  case "$1" in
    --image)
      IMAGE="$2"
      if [[ -z ${IMAGE} ]]; then
        usage
      fi
      shift 2
      ;;
    --fast)
      FAST=1
      shift
      ;;
    --verbose)
      VERBOSE=1
      shift
      ;;
    -h | --help) usage 0 ;;
    *)
      printf "unrecognized arg: %s\n" "$1"
      usage
      ;;
  esac
done

TESTS_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
readonly TESTS_DIR
readonly TOOLS_DIR="${TESTS_DIR}"/../tools
readonly HASHES_DIR="${TESTS_DIR}"/data/hashes
readonly IMAGES_DIR="${TESTS_DIR}"/../images
if [[ -n ${IMAGE} ]]; then
  IMAGE_LIST="${IMAGE}"
else
  IMAGE_LIST="$(get_image_list "${IMAGES_DIR}")"
fi
readonly IMAGE_LIST
declare -i RETCODE=0

function cli_tests_test-tools() {
  declare -r _image="$1"
  if [[ ${FAST} -eq 1 ]] || [[ ${_image} != test-tools ]]; then
    return
  fi
  declare -a -r TOOLS=(
    "${TOOLS_DIR}/curl --version"
    "${TOOLS_DIR}/ghz --version"
    "${TOOLS_DIR}/ab -V"
    "${TOOLS_DIR}/cassowary --version"
    "${TOOLS_DIR}/grpcurl -version"
    "${TOOLS_DIR}/h2load --version"
    "${TOOLS_DIR}/hadolint --version"
    "${TOOLS_DIR}/jq --version"
  )
  printf "Testing CLI tool wrappers\n"
  for tool_cmd in "${TOOLS[@]}"; do
    printf "  %s\n" "${tool_cmd}"
    ${tool_cmd} >/dev/null
  done
}

function cli_tests_release() {
  declare -r _image="$1"
  if [[ ${FAST} -eq 1 ]] || [[ ${_image} != release ]]; then
    return
  fi
  declare -a -r TOOLS=(
    "${TOOLS_DIR}/buildozer -version"
  )
  printf "Testing CLI tool wrappers\n"
  for tool_cmd in "${TOOLS[@]}"; do
    printf "  %s\n" "${tool_cmd}"
    ${tool_cmd} >/dev/null
  done
}

function create_temp_hash_dir() {
  local -r DIR=$(mktemp --directory)
  cp "${HASHES_DIR}"/* "${DIR}"
  printf "%s" "${DIR}"
}

TMP_HASHES_DIR1=$(create_temp_hash_dir)

# warning when running inside a docker container
if [[ -f /.dockerenv ]]; then
  printf "warning: Executing within docker container, which obviates testing in a non-docker environment\n" &>/dev/stderr
fi
printf "Generating image hashes (direct mode)\n"
declare -a -r GET_BUILDER_IMAGE_ARGS=(
  --no-build
  --sha-only
)
for img in ${IMAGE_LIST}; do
  # shellcheck disable=SC2086
  if ! "${TOOLS_DIR}"/get-builder-image-tagged "${GET_BUILDER_IMAGE_ARGS[@]}" --image ${img} >"${TMP_HASHES_DIR1}/${img}"; then
    printf "Error generating image hash: %s\n" "${img}" &>/dev/stderr
    RETCODE+=1
  fi
done

BASELINE_UPDATES="$(diff --brief "${HASHES_DIR}" "${TMP_HASHES_DIR1}" || true)"
readonly BASELINE_UPDATES
if [[ -n $BASELINE_UPDATES ]]; then
  # shellcheck disable=SC2086
  printf "detected shift in baseline files:\n%s\n" "${BASELINE_UPDATES}"
  if [[ ${VERBOSE} -eq 1 ]]; then
    diff "${HASHES_DIR}" "${TMP_HASHES_DIR1}" || true
  fi
  cp --force "${TMP_HASHES_DIR1}"/* "${HASHES_DIR}"
  RETCODE+=10
else
  printf "hashes unchanged\n"
fi

if [[ ${FAST} -eq 1 ]]; then
  exit ${RETCODE}
fi

TMP_HASHES_DIR2=$(create_temp_hash_dir)

printf "Generating image hashes (cbuild mode)\n"
for img in ${IMAGE_LIST}; do
  if ! "${TOOLS_DIR}"/cbuild --image build-debian --cmd "tools/get-builder-image-tagged ${GET_BUILDER_IMAGE_ARGS[*]} --image ${img}" >"${TMP_HASHES_DIR2}/${img}"; then
    printf "Error generating image hash: %s\n" "${img}" &>/dev/stderr
    RETCODE+=1
  fi
done

MODE_MISMATCH="$(diff --brief "${TMP_HASHES_DIR1}" "${TMP_HASHES_DIR2}" || true)"
readonly MODE_MISMATCH
if [[ -n $MODE_MISMATCH ]]; then
  # shellcheck disable=SC2086
  printf "Error: mismatch between direct and cbuild modes\n%s" "${MODE_MISMATCH}" &>/dev/stderr
  if [[ ${VERBOSE} -eq 1 ]]; then
    diff "${TMP_HASHES_DIR1}" "${TMP_HASHES_DIR2}" || true
  fi
  RETCODE+=100
else
  printf "hashes unchanged\n"
fi

for img in ${IMAGE_LIST}; do
  cli_tests_test-tools "${img}"
  cli_tests_release "${img}"
done

exit ${RETCODE}
