#!/bin/bash

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit

VERBOSE=0

usage() {
  local exitval=${1-1}
  cat >&2 << USAGE
usage:
  $0 <options>
    --verbose                     Emit verbose info. Default: false
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --verbose)
      VERBOSE=1
      set -o xtrace
      shift
      ;;
    -h | --help)
      usage 0
      break
      ;;
    *) usage 0 ;;
  esac
done

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
readonly SCRIPT_DIR

function apt_update() {
  apt-get --quiet -o 'Acquire::https::No-Cache=True' -o 'Acquire::http::No-Cache=True' update
}

function install_python() {
  apt-get --quiet install -y python3.8-venv="3.8.10-0ubuntu1~20.04.5"
}

function install_packages() {
  declare -a PACKAGES=(
    lsb-release
    apt-transport-https
    ca-certificates
    wget
    curl
    gnupg
    software-properties-common
    shellcheck
  )
  DEBIAN_FRONTEND=noninteractive apt-get --quiet install -y "${PACKAGES[@]}"
}

# Install Docker (https://docs.docker.com/engine/install/debian/)
function install_docker() {
  apt-get --quiet remove docker docker.io containerd runc
  mkdir -p /etc/apt/keyrings
  DIST=ubuntu
  curl --silent --fail --show-error --location https://download.docker.com/linux/${DIST}/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  echo "deb [arch=${ARCH} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/${DIST} $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list
  apt_update
  DEBIAN_FRONTEND=noninteractive apt-get --quiet install -y docker-ce docker-ce-cli containerd.io
}

function install_precommit_cache() {
  python3 -m venv "${PRE_COMMIT_VENV_DIR}"
  "${PRE_COMMIT_VENV_DIR}"/bin/pip install pre-commit
  "${PRE_COMMIT_TOOL}" --version

  # initialize pre-commit cache, which needs a git repo (a temporary will suffice)
  GIT_REPO="$(mktemp -d)"
  readonly GIT_REPO
  git init "${GIT_REPO}"
  cd "${GIT_REPO}"
  # create a placeholder terraform file in the git repo, giving addlicense something to do
  echo "# a placeholder file for addlicense" > placeholder.tf
  git add placeholder.tf
  # run a single arbitrary hook to trigger population of cache
  "${PRE_COMMIT_TOOL}" run --config "${SCRIPT_DIR}"/.pre-commit-config.yaml || true
  rm -rf "${GIT_REPO}"
}

if [[ ${VERBOSE} -eq 1 ]]; then
  printf "=== SHELL ENVIRONMENT ===\n"
  env
fi

ARCH=$(dpkg --print-architecture)
readonly ARCH

apt_update
install_python
install_packages

# shellcheck disable=SC1090
. "${SCRIPT_DIR}"/install_go.sh
install_golang "${ARCH}"
install_docker
install_precommit_cache
remove_golang

apt-get --quiet autoremove -y
apt-get clean
