#!/bin/bash
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit

TOOLS_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
readonly TOOLS_DIR
# shellcheck disable=SC1091
source "${TOOLS_DIR}"/builder.sh

trap __cleanup EXIT
function __cleanup() {
  declare -r -i STATUS=$?
  readonly LOGFILE=/var/cache/pre-commit/pre-commit.log
  if [[ -s ${LOGFILE} ]]; then
    printf "==== %s ====\n" ${LOGFILE} &>/dev/stderr
    cat ${LOGFILE} &>/dev/stderr
    printf "===========\n" &>/dev/stderr
  fi
  if [[ ${CLEANUP} -eq 0 ]]; then
    exit ${STATUS}
  fi
  # shellcheck disable=SC2086
  "${TOOLS_DIR}"/cbuild ${CBUILD_COMMON_ARGS} --cmd $"
# change file ownership back to user
{
  git ls-files . --modified
  git diff --staged --name-only
} | \
  sort -u | \
  xargs --replace={} /bin/bash -c '{ chown -f $(builder::id u) {}; chgrp -f $(builder::id g) {};}'
# clean up 'empty' node_modules dir created by prettier 2.x
if [[ -d node_modules ]]; then
  rmdir node_modules/.cache/prettier/ node_modules/.cache/ node_modules/
fi
"
  exit ${STATUS}
}

function __exit_msg() {
  declare -r MSG="$1"
  printf "%s. Exiting\n" "${MSG}" &>/dev/stderr
  exit 1
}

function __install_git_hooks() {
  git rev-parse --is-inside-work-tree >/dev/null || __exit_msg "Not in a git repository"
  declare -r GIT_HOOKS_SRC_DIR="${TOOLS_DIR}/git-hooks"
  declare -r GIT_HOOKS_DIR="${WORKSPACE}/.git/hooks"
  chmod +x "${GIT_HOOKS_SRC_DIR}"
  cp -p "${GIT_HOOKS_SRC_DIR}"/* "${GIT_HOOKS_DIR}"
  printf "installed git hooks\n"
}

function __usage() {
  declare -r -i exitval=${1-1}
  cat &>/dev/stderr << USAGE
usage:
  $0 [command]

A CLI tool to run pre-commit checks.

  <default>          if command not specified, run the pre-commit tool on all files in entire workspace
  install            install as a git pre-commit hook in the current git repo
  autoupdate         update hook versions in .pre-commit-config.yaml

environment variables (all optional):
    SKIP             comma-delimited list of hook ids to skip
    PRESUBMIT_IMAGE  docker URI to the specific presubmit image to run
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

function __init() {
  if [[ -n ${PRESUBMIT_IMAGE} ]]; then
    IMAGE_TAGGED="${PRESUBMIT_IMAGE}"
  else
    IMAGE_TAGGED="$("${TOOLS_DIR}"/get-builder-image-tagged --image presubmit)"
  fi
  readonly IMAGE_TAGGED
  export CBUILD_IMAGE="${IMAGE_TAGGED}"

  local -r ARCH="$("${TOOLS_DIR}"/get-architecture)"
  if [[ ${ARCH} == arm64 ]]; then
    if [[ -z ${SKIP} ]]; then
      SKIP_HOOKS="terraform-fmt"
    else
      SKIP_HOOKS="${SKIP},terraform-fmt"
    fi
  else
    SKIP_HOOKS="${SKIP}"
  fi
  if [[ -n ${SKIP_HOOKS} ]]; then
    printf "Skipping pre-commit hooks: %s\n" "${SKIP_HOOKS}"
  fi
  SKIP_ENV="SKIP=${SKIP_HOOKS}"
}

CLEANUP=0

CBUILD_COMMON_ARGS="--without-shared-cache --image presubmit"

# TODO: run bazel //:precommit-hooks rather than just the pre-commit tool
if [[ $# -gt 0 ]]; then
  case "$1" in
    install) __install_git_hooks ;;

    help | --help | -h) __usage 0 ;;

    autoupdate)
      PRECOMMIT_CMD="$1"
      shift
      __init
      # shellcheck disable=SC2086
      "${TOOLS_DIR}"/cbuild ${CBUILD_COMMON_ARGS} --env "${SKIP_ENV}" --cmd "/usr/pre-commit-venv/bin/pre-commit ${PRECOMMIT_CMD} --config ./.pre-commit-config.yaml $*"
      ;;

    hook-impl)
      PRECOMMIT_CMD="$1"
      CLEANUP=1
      shift
      __init
      docker run --rm \
        --entrypoint=/usr/pre-commit-venv/bin/pre-commit \
        --volume "${WORKSPACE}":/src/workspace \
        -v /var/run/docker.sock:/var/run/docker.sock \
        --env "${SKIP_ENV}" \
        --workdir /src/workspace \
        "${IMAGE_TAGGED}" \
        "${PRECOMMIT_CMD}" --config ./.pre-commit-config.yaml "$@"
      ;;

    *)
      __init
      CLEANUP=1
      for HOOK in "$@"; do
        # shellcheck disable=SC2086
        "${TOOLS_DIR}"/cbuild ${CBUILD_COMMON_ARGS} --env "${SKIP_ENV}" --cmd "/usr/pre-commit-venv/bin/pre-commit run --config ./.pre-commit-config.yaml --all-files ${HOOK}"
      done
  esac
else
  __init
  CLEANUP=1
  # shellcheck disable=SC2086
  "${TOOLS_DIR}"/cbuild ${CBUILD_COMMON_ARGS} --env "${SKIP_ENV}" --cmd "/usr/pre-commit-venv/bin/pre-commit run --config ./.pre-commit-config.yaml --all-files"
fi
